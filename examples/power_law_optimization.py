#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Å—Ç–µ–ø–µ–Ω–Ω–∏—è –º–æ–¥–µ–ª a(t) = C*t^n
–¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –Ω–∞–π-–¥–æ–±—Ä–æ—Ç–æ n –∑–∞ –∏–º–∏—Ç–∏—Ä–∞–Ω–µ –Ω–∞ ŒõCDM –º–æ–¥–µ–ª–∞
"""

import numpy as np
import matplotlib.pyplot as plt
import sys
import os

# –î–æ–±–∞–≤—è–º–µ –ø—ä—Ç—è –∫—ä–º –Ω–∞—à–∏—Ç–µ –º–æ–¥—É–ª–∏
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from lib.core.power_law_universe import PowerLawUniverse, find_optimal_n_for_lcdm_match, compare_models_at_z

def test_power_law_optimization():
    """
    –¢–µ—Å—Ç–≤–∞ —Å—Ç–µ–ø–µ–Ω–Ω–∏—è –º–æ–¥–µ–ª –∏ –Ω–∞–º–∏—Ä–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–æ—Ç–æ n –∑–∞ –∏–º–∏—Ç–∏—Ä–∞–Ω–µ –Ω–∞ ŒõCDM
    """
    print("=== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ù–ê –°–¢–ï–ü–ï–ù–ù–ò–Ø –ú–û–î–ï–õ ===\n")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
    H0 = 70.0  # km/s/Mpc
    
    # Redshift –¥–∏–∞–ø–∞–∑–æ–Ω - —Ñ–æ–∫—É—Å–∏—Ä–∞–º–µ —Å–µ –≤—ä—Ä—Ö—É –Ω–∞–±–ª—é–¥–∞–µ–º–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω
    z_test = np.logspace(-2, 0.5, 100)  # z = 0.01 –¥–æ z ‚âà 3.16
    
    print(f"–¢–µ—Å—Ç–≤–∞–º–µ —Å H0 = {H0} km/s/Mpc")
    print(f"Redshift –¥–∏–∞–ø–∞–∑–æ–Ω: z = {z_test.min():.3f} –¥–æ z = {z_test.max():.2f}")
    print(f"–ë—Ä–æ–π —Ç–æ—á–∫–∏: {len(z_test)}")
    
    # –°—Ç—ä–ø–∫–∞ 1: –ù–∞–º–∏—Ä–∞–º–µ –æ–ø—Ç–∏–º–∞–ª–Ω–æ—Ç–æ n
    print("\n=== –°–¢–™–ü–ö–ê 1: –ù–ê–ú–ò–†–ê–ù–ï –ù–ê –û–ü–¢–ò–ú–ê–õ–ù–û n ===")
    
    optimal_n, min_chi2, analysis_info = find_optimal_n_for_lcdm_match(
        z_test, H0=H0, n_range=(0.6, 1.0)
    )
    
    print(f"\nüéØ –û–ü–¢–ò–ú–ê–õ–ù–ò –†–ï–ó–£–õ–¢–ê–¢–ò:")
    print(f"–û–ø—Ç–∏–º–∞–ª–Ω–æ n: {optimal_n:.4f}")
    print(f"–ú–∏–Ω–∏–º–∞–ª–Ω–∞ œá¬≤: {min_chi2:.6f}")
    print(f"RMS —Ä–∞–∑–ª–∏–∫–∞: {analysis_info['rms_residual']:.6f} mag")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª–Ω–∞ —Ä–∞–∑–ª–∏–∫–∞: {analysis_info['max_residual']:.6f} mag")
    print(f"–í—ä–∑—Ä–∞—Å—Ç –Ω–∞ –í—Å–µ–ª–µ–Ω–∞—Ç–∞: {analysis_info['universe_age_Gyr']:.2f} Gyr")
    
    # –°—Ç—ä–ø–∫–∞ 2: –°—Ä–∞–≤–Ω—è–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏ –º–æ–¥–µ–ª–∏
    print("\n=== –°–¢–™–ü–ö–ê 2: –°–†–ê–í–ù–ï–ù–ò–ï –ù–ê –ú–û–î–ï–õ–ò ===")
    
    comparison = compare_models_at_z(z_test, H0=H0)
    
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ù–ê –ú–û–î–ï–õ–ò–¢–ï:")
    print(f"{'–ú–æ–¥–µ–ª':<20} {'n':<8} {'RMS —Ä–∞–∑–ª–∏–∫–∞':<12} {'–í—ä–∑—Ä–∞—Å—Ç (Gyr)':<12}")
    print("-" * 60)
    
    for model_name, model_data in comparison['models'].items():
        n_str = f"{model_data['n']:.3f}" if model_data['n'] != 'N/A' else "N/A"
        rms_str = f"{model_data['rms_diff_from_lcdm']:.6f}" if model_data['rms_diff_from_lcdm'] > 0 else "0.000000"
        age_str = f"{model_data['age_Gyr']:.2f}"
        print(f"{model_name:<20} {n_str:<8} {rms_str:<12} {age_str:<12}")
    
    # –°—Ç—ä–ø–∫–∞ 3: –î–µ—Ç–∞–π–ª–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    print("\n=== –°–¢–™–ü–ö–ê 3: –°–™–ó–î–ê–í–ê–ù–ï –ù–ê –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ===")
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –º–æ–¥–µ–ª–∏ –∑–∞ –≥—Ä–∞—Ñ–∏–∫–∏
    linear_model = PowerLawUniverse(H0_kmsmpc=H0, n=1.0)
    matter_model = PowerLawUniverse(H0_kmsmpc=H0, n=2.0/3.0)
    optimal_model = PowerLawUniverse(H0_kmsmpc=H0, n=optimal_n)
    
    # ŒõCDM –º–æ–¥–µ–ª
    try:
        from astropy.cosmology import FlatLambdaCDM
        lcdm_model = FlatLambdaCDM(H0=H0, Om0=0.3)
        mu_lcdm = lcdm_model.distmod(z_test).value
        d_L_lcdm = lcdm_model.luminosity_distance(z_test).value
    except ImportError:
        from lib.core.linear_universe import SimpleLCDMUniverse
        lcdm_model = SimpleLCDMUniverse(H0=H0, Om0=0.3, OL0=0.7)
        mu_lcdm = lcdm_model.distance_modulus(z_test)
        d_L_lcdm = lcdm_model.luminosity_distance(z_test)
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –º–æ–¥—É–ª–∏—Ç–µ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ
    mu_linear = linear_model.distance_modulus_at_z(z_test)
    mu_matter = matter_model.distance_modulus_at_z(z_test)
    mu_optimal = optimal_model.distance_modulus_at_z(z_test)
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å–≤–µ—Ç–∏–º–æ—Å—Ç–Ω–∏—Ç–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è
    d_L_linear = linear_model.luminosity_distance_at_z(z_test)
    d_L_matter = matter_model.luminosity_distance_at_z(z_test)
    d_L_optimal = optimal_model.luminosity_distance_at_z(z_test)
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –≥—Ä–∞—Ñ–∏–∫–∏
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    
    # –ü–∞–Ω–µ–ª 1: –ú–æ–¥—É–ª –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ vs z
    axes[0, 0].semilogx(z_test, mu_lcdm, 'k-', linewidth=3, label='ŒõCDM', alpha=0.8)
    axes[0, 0].semilogx(z_test, mu_linear, 'r--', linewidth=2, label=f'Linear (n=1.0)', alpha=0.8)
    axes[0, 0].semilogx(z_test, mu_matter, 'b:', linewidth=2, label=f'Matter (n=2/3)', alpha=0.8)
    axes[0, 0].semilogx(z_test, mu_optimal, 'g-', linewidth=2, label=f'Optimal (n={optimal_n:.3f})', alpha=0.8)
    axes[0, 0].set_xlabel('Redshift z')
    axes[0, 0].set_ylabel('Distance Modulus [mag]')
    axes[0, 0].set_title('–ú–æ–¥—É–ª –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ')
    axes[0, 0].legend()
    axes[0, 0].grid(True, alpha=0.3)
    
    # –ü–∞–Ω–µ–ª 2: –°–≤–µ—Ç–∏–º–æ—Å—Ç–Ω–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ vs z
    axes[0, 1].loglog(z_test, d_L_lcdm, 'k-', linewidth=3, label='ŒõCDM', alpha=0.8)
    axes[0, 1].loglog(z_test, d_L_linear, 'r--', linewidth=2, label=f'Linear (n=1.0)', alpha=0.8)
    axes[0, 1].loglog(z_test, d_L_matter, 'b:', linewidth=2, label=f'Matter (n=2/3)', alpha=0.8)
    axes[0, 1].loglog(z_test, d_L_optimal, 'g-', linewidth=2, label=f'Optimal (n={optimal_n:.3f})', alpha=0.8)
    axes[0, 1].set_xlabel('Redshift z')
    axes[0, 1].set_ylabel('Luminosity Distance [Mpc]')
    axes[0, 1].set_title('–°–≤–µ—Ç–∏–º–æ—Å—Ç–Ω–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ')
    axes[0, 1].legend()
    axes[0, 1].grid(True, alpha=0.3)
    
    # –ü–∞–Ω–µ–ª 3: –†–∞–∑–ª–∏–∫–∏ —Å–ø—Ä—è–º–æ ŒõCDM
    axes[0, 2].semilogx(z_test, mu_linear - mu_lcdm, 'r--', linewidth=2, label=f'Linear (n=1.0)', alpha=0.8)
    axes[0, 2].semilogx(z_test, mu_matter - mu_lcdm, 'b:', linewidth=2, label=f'Matter (n=2/3)', alpha=0.8)
    axes[0, 2].semilogx(z_test, mu_optimal - mu_lcdm, 'g-', linewidth=2, label=f'Optimal (n={optimal_n:.3f})', alpha=0.8)
    axes[0, 2].axhline(y=0, color='k', linestyle='-', alpha=0.5)
    axes[0, 2].set_xlabel('Redshift z')
    axes[0, 2].set_ylabel('ŒîŒº [mag]')
    axes[0, 2].set_title('–†–∞–∑–ª–∏–∫–∏ —Å–ø—Ä—è–º–æ ŒõCDM')
    axes[0, 2].legend()
    axes[0, 2].grid(True, alpha=0.3)
    
    # –ü–∞–Ω–µ–ª 4: –•—ä–±—ä–ª –ø–∞—Ä–∞–º–µ—Ç—ä—Ä vs z
    H_linear = linear_model.hubble_parameter_z(z_test)
    H_matter = matter_model.hubble_parameter_z(z_test)
    H_optimal = optimal_model.hubble_parameter_z(z_test)
    H_lcdm = H0 * np.sqrt(0.3 * (1 + z_test)**3 + 0.7)
    
    axes[1, 0].loglog(z_test, H_lcdm, 'k-', linewidth=3, label='ŒõCDM', alpha=0.8)
    axes[1, 0].loglog(z_test, H_linear, 'r--', linewidth=2, label=f'Linear (n=1.0)', alpha=0.8)
    axes[1, 0].loglog(z_test, H_matter, 'b:', linewidth=2, label=f'Matter (n=2/3)', alpha=0.8)
    axes[1, 0].loglog(z_test, H_optimal, 'g-', linewidth=2, label=f'Optimal (n={optimal_n:.3f})', alpha=0.8)
    axes[1, 0].set_xlabel('Redshift z')
    axes[1, 0].set_ylabel('H(z) [km/s/Mpc]')
    axes[1, 0].set_title('–•—ä–±—ä–ª –ø–∞—Ä–∞–º–µ—Ç—ä—Ä')
    axes[1, 0].legend()
    axes[1, 0].grid(True, alpha=0.3)
    
    # –ü–∞–Ω–µ–ª 5: –í—ä–∑—Ä–∞—Å—Ç –Ω–∞ –í—Å–µ–ª–µ–Ω–∞—Ç–∞ vs z
    age_linear = linear_model.age_at_z(z_test) / 1e9
    age_matter = matter_model.age_at_z(z_test) / 1e9
    age_optimal = optimal_model.age_at_z(z_test) / 1e9
    
    # –ó–∞ ŒõCDM –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞
    age_lcdm = np.zeros_like(z_test)
    for i, z in enumerate(z_test):
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ –∑–∞ ŒõCDM
        age_lcdm[i] = (13.8 / 1e9) * (1 + z)**(-1.5)  # –ì—Ä—É–±–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
    
    axes[1, 1].loglog(z_test, age_linear, 'r--', linewidth=2, label=f'Linear (n=1.0)', alpha=0.8)
    axes[1, 1].loglog(z_test, age_matter, 'b:', linewidth=2, label=f'Matter (n=2/3)', alpha=0.8)
    axes[1, 1].loglog(z_test, age_optimal, 'g-', linewidth=2, label=f'Optimal (n={optimal_n:.3f})', alpha=0.8)
    axes[1, 1].set_xlabel('Redshift z')
    axes[1, 1].set_ylabel('Age [Gyr]')
    axes[1, 1].set_title('–í—ä–∑—Ä–∞—Å—Ç –Ω–∞ –í—Å–µ–ª–µ–Ω–∞—Ç–∞')
    axes[1, 1].legend()
    axes[1, 1].grid(True, alpha=0.3)
    
    # –ü–∞–Ω–µ–ª 6: –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏–∫–∏—Ç–µ
    residuals_linear = mu_linear - mu_lcdm
    residuals_matter = mu_matter - mu_lcdm
    residuals_optimal = mu_optimal - mu_lcdm
    
    axes[1, 2].hist(residuals_linear, bins=20, alpha=0.7, label=f'Linear (n=1.0)', color='red')
    axes[1, 2].hist(residuals_matter, bins=20, alpha=0.7, label=f'Matter (n=2/3)', color='blue')
    axes[1, 2].hist(residuals_optimal, bins=20, alpha=0.7, label=f'Optimal (n={optimal_n:.3f})', color='green')
    axes[1, 2].axvline(x=0, color='k', linestyle='-', alpha=0.5)
    axes[1, 2].set_xlabel('–û—Å—Ç–∞—Ç—ä—Ü–∏ [mag]')
    axes[1, 2].set_ylabel('–ß–µ—Å—Ç–æ—Ç–∞')
    axes[1, 2].set_title('–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏—Ç–µ')
    axes[1, 2].legend()
    axes[1, 2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('power_law_optimization.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –°—Ç—ä–ø–∫–∞ 4: –ê–Ω–∞–ª–∏–∑ –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞
    print("\n=== –°–¢–™–ü–ö–ê 4: –ê–ù–ê–õ–ò–ó –ù–ê –ß–£–í–°–¢–í–ò–¢–ï–õ–ù–û–°–¢–¢–ê ===")
    
    # –¢–µ—Å—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ n –æ–∫–æ–ª–æ –æ–ø—Ç–∏–º–∞–ª–Ω–æ—Ç–æ
    n_values = np.linspace(0.6, 1.0, 41)
    rms_values = []
    
    for n in n_values:
        test_model = PowerLawUniverse(H0_kmsmpc=H0, n=n)
        mu_test = test_model.distance_modulus_at_z(z_test)
        rms = np.sqrt(np.mean((mu_test - mu_lcdm)**2))
        rms_values.append(rms)
    
    # –ù–∞–º–∏—Ä–∞–º–µ –º–∏–Ω–∏–º—É–º–∞
    min_idx = np.argmin(rms_values)
    
    print(f"–ú–∏–Ω–∏–º—É–º –ø—Ä–∏ n = {n_values[min_idx]:.4f}")
    print(f"–ú–∏–Ω–∏–º–∞–ª–Ω–∞ RMS —Ä–∞–∑–ª–∏–∫–∞: {rms_values[min_idx]:.6f} mag")
    
    # –ì—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞
    plt.figure(figsize=(10, 6))
    plt.plot(n_values, rms_values, 'b-', linewidth=2)
    plt.axvline(x=optimal_n, color='r', linestyle='--', label=f'–û–ø—Ç–∏–º–∞–ª–Ω–æ n = {optimal_n:.4f}')
    plt.axvline(x=1.0, color='g', linestyle=':', label='–õ–∏–Ω–µ–µ–Ω –º–æ–¥–µ–ª (n=1.0)')
    plt.axvline(x=2.0/3.0, color='orange', linestyle=':', label='–ú–∞—Ç–µ—Ä–∏–∞–ª–µ–Ω –º–æ–¥–µ–ª (n=2/3)')
    plt.xlabel('–°—Ç–µ–ø–µ–Ω–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª n')
    plt.ylabel('RMS —Ä–∞–∑–ª–∏–∫–∞ —Å ŒõCDM [mag]')
    plt.title('–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–Ω–æ—Å—Ç –Ω–∞ –º–æ–¥–µ–ª–∞ –∫—ä–º –ø–∞—Ä–∞–º–µ—Ç—ä—Ä–∞ n')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.savefig('n_sensitivity_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –°—Ç—ä–ø–∫–∞ 5: –ó–∞–∫–ª—é—á–µ–Ω–∏—è
    print("\n=== –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø ===")
    
    print(f"\nüéØ –ö–õ–Æ–ß–û–í–ò –û–¢–ö–†–ò–¢–ò–Ø:")
    print(f"1. –û–ø—Ç–∏–º–∞–ª–Ω–æ n = {optimal_n:.4f} (–º–µ–∂–¥—É –º–∞—Ç–µ—Ä–∏–∞–ª–Ω–∏—è n=2/3‚âà0.667 –∏ –ª–∏–Ω–µ–π–Ω–∏—è n=1.0)")
    print(f"2. RMS —Ä–∞–∑–ª–∏–∫–∞ —Å ŒõCDM: {analysis_info['rms_residual']:.6f} mag")
    print(f"3. –í—ä–∑—Ä–∞—Å—Ç –Ω–∞ –í—Å–µ–ª–µ–Ω–∞—Ç–∞: {analysis_info['universe_age_Gyr']:.2f} Gyr")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏ –º–æ–¥–µ–ª–∏
    linear_rms = comparison['models']['Linear (n=1.0)']['rms_diff_from_lcdm']
    matter_rms = comparison['models']['Matter (n=2/3)']['rms_diff_from_lcdm']
    optimal_rms = comparison['models'][f'Optimal (n={optimal_n:.3f})']['rms_diff_from_lcdm']
    
    print(f"\nüìä –ü–û–î–û–ë–†–ï–ù–ò–Ø:")
    print(f"–°–ø—Ä—è–º–æ –ª–∏–Ω–µ–π–Ω–∏—è –º–æ–¥–µ–ª: {linear_rms/optimal_rms:.1f}x –ø–æ-–¥–æ–±—ä—Ä")
    print(f"–°–ø—Ä—è–º–æ –º–∞—Ç–µ—Ä–∏–∞–ª–Ω–∏—è –º–æ–¥–µ–ª: {matter_rms/optimal_rms:.1f}x –ø–æ-–¥–æ–±—ä—Ä")
    
    if optimal_rms < 0.001:
        print(f"\n‚úÖ –û–¢–õ–ò–ß–ù–û: –†–∞–∑–ª–∏–∫–∞—Ç–∞ –µ –ø–æ–¥ 0.001 mag - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—Ä–∞–∑–ª–∏—á–∏–º–∞ –æ—Ç ŒõCDM!")
    elif optimal_rms < 0.01:
        print(f"\n‚úÖ –ú–ù–û–ì–û –î–û–ë–†–û: –†–∞–∑–ª–∏–∫–∞—Ç–∞ –µ –ø–æ–¥ 0.01 mag - –º–Ω–æ–≥–æ –±–ª–∏–∑–æ –¥–æ ŒõCDM!")
    else:
        print(f"\n‚ö†Ô∏è –î–û–ë–†–û: –†–∞–∑–ª–∏–∫–∞—Ç–∞ –µ {optimal_rms:.6f} mag - –ø–æ–¥–æ–±—Ä–µ–Ω–∏–µ, –Ω–æ –æ—â–µ –∏–º–∞ —Ä–∞–∑–ª–∏–∫–∏")
    
    print(f"\nüî¨ –§–ò–ó–ò–ß–ï–°–ö–ò –°–ú–ò–°–™–õ:")
    print(f"n = {optimal_n:.4f} –æ–∑–Ω–∞—á–∞–≤–∞ –ª–µ–∫–æ –∑–∞–±–∞–≤—è–Ω–µ –Ω–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ—Ç–æ")
    print(f"H(t) = {optimal_n:.4f}/t - –ø–æ-–±–∞–≤–Ω–æ –æ—Ç –ª–∏–Ω–µ–π–Ω–∏—è –º–æ–¥–µ–ª")
    print(f"–ù—è–º–∞ –Ω—É–∂–¥–∞ –æ—Ç —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è –∑–∞ –æ–±—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ç–∞!")
    
    return optimal_n, analysis_info


if __name__ == "__main__":
    optimal_n, info = test_power_law_optimization()
    print(f"\n–û–ö–û–ù–ß–ê–¢–ï–õ–ï–ù –†–ï–ó–£–õ–¢–ê–¢: n = {optimal_n:.4f}") 